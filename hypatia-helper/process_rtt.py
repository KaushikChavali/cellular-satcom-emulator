#!/usr/bin/python3

import csv
import math
import os
import re
import statistics

milli = 1 / 1000000
nano = 1 / 1000000000
path = os.getcwd()
input_dir = path + "/input"
output_dir = path + "/output"
os.chdir(input_dir)


def process_time_delay_values(time_in_s, delay_in_ms):
    """
    The function processes the delay values generated by Hypatia to
    be compatible with OpenSAND. OpenSAND offers delay configuration
    at a granularity of one second. The values generated by Hypatia 
    are more precise. Hence the function reads all the delay values
    generated in one second by Hypatia and computes a median. The
    median delay value is set for a specified time interval in the
    OpenSAND emulation.

    Parameters
    ----------
    time_in_s : list
        The raw time interval from Hypatia
    delay_in_ms : list
        The raw one-way delay values from Hypatia

    Returns
    -------
    time_in_s_processed : list
        The processed time interval values for OpenSAND
    delay_in_ms_processed : list
        The processed one-way delay values for OpenSAND
    """

    time_in_s_processed = list()
    delay_in_ms_processed = list()

    t_i = math.trunc(time_in_s[0])
    delay_t = list()

    for idx, val in enumerate(time_in_s):
        # Appends all delay values in a one-second interval to a list
        # For each one-second interval, the median of the delay values
        # from the above list is computed.
        if math.trunc(val) == t_i:
            delay_t.append(delay_in_ms[idx])
        else:
            delay_median = statistics.median(delay_t)

            time_in_s_processed.append(t_i)
            delay_in_ms_processed.append(delay_median)

            delay_t.clear()
            delay_t.append(delay_in_ms[idx])

            t_i = math.trunc(val)

    if delay_t:
        time_in_s_processed.append(t_i)
        delay_in_ms_processed.append(delay_t[0])

    return time_in_s_processed, delay_in_ms_processed


def process_hypatia_delays():
    """
    The function reads the delay values genenrated from Hypatia LEO simulation
    and formats to a file that is compatible with the OpenSAND emulator.

    Parameters
    ----------
    None

    Returns
    -------
    None
    """

    # Batch processes all the files stored in the input directory
    for filename in os.listdir(os.getcwd()):
        time = list()
        rtt = list()
        print("Processing file {}".format(filename))
        with open(os.path.join(os.getcwd(), filename), 'r') as f:
            reader = csv.reader(f, delimiter=',')
            for row in reader:
                time.append(row[1])
                rtt.append(row[2])

        """
        Hypatia genenrates rtt values which must be converted to one-way delay
        in OpenSAND.
        """
        time_in_ns = [int(i) for i in time]
        delay_in_ns = [int(j) / 2 for j in rtt]

        """
        The one-way delay values need to be configured on both the satellite 
        gateway (ST) and satellite terminal (ST). Consider symmetric delays
        at both ends, the one way delay values are halved.
        """
        delay_in_ns = [int(j) / 2 for j in delay_in_ns]

        """
        Hypatia generates timing and rtt values in nanoseconds (ns). OpenSAND
        accepts time in seconds and delay in milliseconds (ms).
        """
        time_in_s = [t * nano for t in time_in_ns]
        delay_in_ms = [d * milli for d in delay_in_ns]

        # Process one-way delay to be compatible with OpenSAND
        time_in_s_processed, delay_in_ms_processed = process_time_delay_values(
            time_in_s, delay_in_ms)

        # Creates and writes data to a new file in the output dir
        os.chdir(output_dir)
        new_filename = re.split("\.", filename)[0] + "_processed.csv"

        with open(os.path.join(os.getcwd(), new_filename), 'w') as nf:
            for t, d in zip(time_in_s_processed, delay_in_ms_processed):
                # Truncates the integral part of the floating-point number
                # OpenSAND supports time and delay values in integers
                line = str(math.trunc(t)) + " " + str(math.trunc(d)) + "\n"
                nf.write(line)
        os.chdir(input_dir)

        print("Processing complete.")


def main():
    process_hypatia_delays()


if __name__ == "__main__":
    main()
